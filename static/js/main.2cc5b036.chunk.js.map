{"version":3,"sources":["GithubUserInfo.js","Card.js","Deck.js","App.js","JokeList.js","serviceWorker.js","index.js"],"names":["Component","Card","props","angle","Math","random","xPos","yPos","_transform","style","transform","this","className","src","image","alt","name","Deck","state","deck","drawn","getCard","bind","deckUrl","axios","get","response","deckId","data","deck_id","setState","id","cardUrl","success","Error","card","cards","st","code","suit","value","alert","map","item","key","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gYAG6BA,Y,cCoBdC,G,kBAnBb,WAAYC,GAAQ,IAAD,sBACjB,4CAAMA,IACN,IAAIC,EAAwB,GAAhBC,KAAKC,SAAgB,GAC7BC,EAAuB,GAAhBF,KAAKC,SAAgB,GAC5BE,EAAuB,GAAhBH,KAAKC,SAAgB,GAJf,OAKjB,EAAKG,WAAL,oBAA+BF,EAA/B,eAA0CC,EAA1C,sBAA4DJ,EAA5D,QALiB,E,sEAQjB,OACE,yBACEM,MAAO,CAACC,UAAWC,KAAKH,YACxBI,UAAU,OACVC,IAAKF,KAAKT,MAAMY,MAChBC,IAAKJ,KAAKT,MAAMc,W,GAdLhB,cCiEJiB,G,kBA5Db,WAAYf,GAAQ,IAAD,8BACjB,4CAAMA,KACDgB,MAAQ,CACXC,KAAM,KACNC,MAAO,IAET,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBANE,E,oKAUbC,E,UAba,uC,oCAcIC,IAAMC,IAAIF,I,OAA3BG,E,OACAC,EAASD,EAASE,KAAKC,QAC3BlB,KAAKmB,SAAS,CAAEX,KAAMQ,I,sKAIlBI,EAAKpB,KAAKO,MAAMC,KAChBa,E,UArBa,uC,YAqBgBD,E,8CAEVP,IAAMC,IAAIO,I,WAA3BN,E,QACUE,KAAKK,Q,uBACX,IAAIC,MAAM,sB,QAEZC,EAAOT,EAASE,KAAKQ,MAAM,GAC/BzB,KAAKmB,UAAS,SAAAO,GAAE,MAAK,CACnBjB,MAAM,GAAD,mBACAiB,EAAGjB,OADH,CAEH,CACEW,GAAII,EAAKG,KACTxB,MAAOqB,EAAKrB,MACZE,KAAK,GAAD,OAAKmB,EAAKI,KAAV,YAAkBJ,EAAKK,c,0DAOnCC,MAAM,EAAD,I,0FAKP,IAAML,EAAQzB,KAAKO,MAAME,MAAMsB,KAAI,SAAAC,GAAI,OACrC,kBAAC,EAAD,CAAMC,IAAKD,EAAKZ,GAAIf,KAAM2B,EAAK3B,KAAMF,MAAO6B,EAAK7B,WAGnD,OACE,yBAAKF,UAAU,QACb,wBAAIA,UAAU,cAAd,6BACA,wBAAIA,UAAU,uBAAd,+CAGA,4BAAQA,UAAU,WAAWiC,QAASlC,KAAKU,SAA3C,aACA,yBAAKT,UAAU,iBAAiBwB,Q,GAvDrBpC,cCWJ8C,G,MCZQ9C,Y,uLDEnB,OACE,yBAAKY,UAAU,OAEb,kBAAC,EAAD,W,GALUZ,cEME+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2cc5b036.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass GithubUserInfo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {}\n    };\n  }\n  //async version\n  async componentDidMount() {\n    const url = `https://api.github.com/users/${this.props.username}`;\n    let response = await axios.get(url);\n    let user = response.data;\n    this.setState({ user });\n  }\n  //     componentDidMount(){\n  //         axios.get('https://api.github.com/users/elie')\n  //          .then(response => {\n  //              let user = response.data\n  //              this.setState({ user });\n  //          });\n  //    }\n\n  render() {\n    return (\n      <div>\n        <h1>{this.state.user.name}</h1>\n        <p>{this.state.user.bio}</p>\n        <img src={this.state.user.avatar_url} />\n      </div>\n    );\n  }\n}\n\nexport default GithubUserInfo;\n","import React, { Component, createContext } from \"react\";\r\nimport './Card.css'\r\n\r\nclass Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let angle = Math.random() * 90 - 45;\r\n    let xPos = Math.random() * 40 - 20;\r\n    let yPos = Math.random() * 40 - 20;\r\n    this._transform = `translate(${xPos}px, ${yPos}px) rotate(${angle}deg)`;\r\n  }\r\n  render() {\r\n    return (\r\n      <img \r\n        style={{transform: this._transform}}\r\n        className=\"Card\" \r\n        src={this.props.image} \r\n        alt={this.props.name}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component, createContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport Card from \"./Card\"\r\nimport './Deck.css'\r\n\r\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck/\";\r\n\r\nclass Deck extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      deck: null,\r\n      drawn: []\r\n    };\r\n    this.getCard = this.getCard.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let deckUrl = `${API_BASE_URL}/new/shuffle/`;\r\n    let response = await axios.get(deckUrl);\r\n    let deckId = response.data.deck_id;\r\n    this.setState({ deck: deckId });\r\n  }\r\n\r\n  async getCard() {\r\n    let id = this.state.deck;\r\n    let cardUrl = `${API_BASE_URL}/${id}/draw/?count=1`;\r\n    try {\r\n      let response = await axios.get(cardUrl);\r\n      if (!response.data.success) {\r\n        throw new Error(\"No card remaining!\");\r\n      } else {\r\n        let card = response.data.cards[0];\r\n        this.setState(st => ({\r\n          drawn: [\r\n            ...st.drawn,\r\n            {\r\n              id: card.code,\r\n              image: card.image,\r\n              name: `${card.suit} ${card.value}`\r\n            }\r\n          ]\r\n        }));\r\n        // console.log(this.state);\r\n      }\r\n    } catch (err) {\r\n      alert(err);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const cards = this.state.drawn.map(item =>\r\n      <Card key={item.id} name={item.name} image={item.image}/>\r\n    )\r\n\r\n    return (\r\n      <div className=\"Deck\">\r\n        <h1 className=\"Deck-title\">♦ Card Dealer ♦</h1>\r\n        <h2 className='Deck-title subtitle'>\r\n          ♦ A little demo made with React ♦\r\n        </h2>\r\n        <button className='Deck-btn' onClick={this.getCard}>Get Card!</button>\r\n        <div className=\"Deck-cardarea\">{cards}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Deck;\r\n","import React, { Component } from 'react';\nimport GithubUserInfo from './GithubUserInfo';\nimport Deck from './Deck'\nimport JokeList from './JokeList'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <GithubUserInfo username=\"Elie\"/> */}\n        <Deck />\n        {/* <JokeList /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component, createContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport './JokeList.css'\r\n\r\nconst API_URL = \"https://icanhazdadjoke.com/\";\r\n\r\nclass JokeList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      jokiList: []\r\n    };\r\n    //this.getCard = this.getCard.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let response = await axios.get(API_URL, {headers: {Accept: \"application/json\"}});\r\n    console.log(response.data.joke)\r\n    // let deckId = response.data.deck_id;\r\n    // this.setState({ deck: deckId });\r\n  }\r\n\r\n  async getJoke() {\r\n  }\r\n\r\n  render() {\r\n    // const cards = this.state.drawn.map(item =>\r\n    //   <Card key={item.id} name={item.name} image={item.image}/>\r\n    // )\r\n\r\n    return (\r\n      <div className=\"\">\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JokeList;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}